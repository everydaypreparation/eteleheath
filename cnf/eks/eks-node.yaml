AWSTemplateFormatVersion: '2010-09-09'
Description: EKS cluster using a VPC with two public subnets

Parameters:

  NumWorkerNodes:
    Type: Number
    Description: Number of worker nodes to create
    Default: 1

  WorkerNodesInstanceType:
    Type: String
    Description: EC2 instance type for the worker nodes
    Default: t2.medium

  KeyPairName:
    Type: String
    Description: Name of an existing EC2 key pair (for SSH-access to the worker node instances)
    Default: "internal-eks-test"

Mappings:

  VpcIpRanges:
    Option1:
      VPC: 10.0.0.0/16       # 00001010.00000000.xxxxxxxx.xxxxxxxx
      Subnet1: 10.0.0.0/18   # 00001010.00000000.00xxxxxx.xxxxxxxx
      Subnet2: 10.0.64.0/18  # 00001010.00000000.01xxxxxx.xxxxxxxx

  # IDs of the "EKS-optimised AMIs" for the worker nodes:
  # https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
  EksAmiIds:
    #us-east-1:
    #  Standard: ami-0a0b913ef3249b655
    us-east-2:
      Standard: ami-07a45fc1d4fd1092a
    #us-west-2:
    #  Standard: ami-0f54a2f7d2e9c88b3
    #eu-west-1:
    #  Standard: ami-00c3b2d35bddd4f5c

Resources:

  #============================================================================#
  # VPC
  #============================================================================#

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, VPC ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, Subnet1 ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Subnet1"

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, Subnet2 ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Subnet2"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnets"

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    # DependsOn is mandatory because route targets InternetGateway
    # See here: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html#gatewayattachment
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  #============================================================================#
  # Control plane
  #============================================================================#

  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref AWS::StackName
      Version: "1.26"
      RoleArn: !GetAtt ControlPlaneRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2

  ControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  #============================================================================#
  # Control plane security group
  #============================================================================#

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the elastic network interfaces between the control plane and the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ControlPlaneSecurityGroup"
      

  ControlPlaneIngressFromWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from worker nodes (for API server)
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  ControlPlaneEgressToWorkerNodesKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing kubelet traffic (TCP/10250) to worker nodes
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  ControlPlaneEgressToWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing HTTPS traffic (TCP/442) to worker nodes (for pods running extension API servers)
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  #============================================================================#
  # Worker nodes security group
  # Note: default egress rule (allow all traffic to all destinations) applies
  #============================================================================#

  WorkerNodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WorkerNodesSecurityGroup"
        - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
          Value: "owned"

  WorkerNodesIngressFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming traffic from other worker nodes
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: "-1"

  WorkerNodesIngressFromControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming kubelet traffic (TCP/10250) from control plane 
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  WorkerNodesIngressFromControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from control plane (for pods running extension API servers)
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  #============================================================================#
  # Worker nodes (auto-scaling group)
  #============================================================================#
  WorkerNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    DependsOn: WorkerNodesLaunchTemplate
    Properties:
      ClusterName: !Ref AWS::StackName
      NodeRole: !GetAtt WorkerNodesRole.Arn
      NodegroupName: !Sub "${AWS::StackName}-WorkerNodeGroup"
      CapacityType: ON_DEMAND
      ScalingConfig:
        MinSize: !Ref NumWorkerNodes
        DesiredSize: !Ref NumWorkerNodes
        MaxSize: !Ref NumWorkerNodes
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchTemplate: 
        Id: !Ref WorkerNodesLaunchTemplate

  WorkerNodesLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    # Wait until cluster is ready before launching worker nodes
    DependsOn: ControlPlane
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-EKS-template"
      LaunchTemplateData:
        InstanceType: !Ref WorkerNodesInstanceType
        #ImageId: !FindInMap
        #  - EksAmiIds
        #  - !Ref AWS::Region
        #  - Standard
        KeyName: !Ref KeyPairName
        TagSpecifications:
         -
          ResourceType: instance
          Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-WorkerNodeGroup"
          - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
            Value: "owned"
          - Key: KubernetesCluster
            Value: !Ref AWS::StackName
        SecurityGroupIds:
          - !Ref WorkerNodesSecurityGroup
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
            DeleteOnTermination: true
        UserData:
          Fn::Base64: !Sub |
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="
            
            --==MYBOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"

            #!/bin/bash
            set -ex
            cert=`aws eks describe-cluster --query "cluster.certificateAuthority.data" --output text --name ${AWS::StackName} --region us-east-2`
            api-url=`aws eks describe-cluster --query "cluster.endpoint" --output text --name ${AWS::StackName} --region us-east-2`
            cidr=`aws eks describe-cluster --query "cluster.kubernetesNetworkConfig.serviceIpv4Cidr" --output text --name ${AWS::StackName} --region us-east-2`
            cidr=(`echo $cidr | awk -F'/' '{ split($1, octets, "."); print octets[1]"."octets[2]"."octets[3]".10" }'`)

            /etc/eks/bootstrap.sh ${AWS::StackName} \
              --b64-cluster-ca $cert \
              --apiserver-endpoint $api-url \
              --dns-cluster-ip $cidr \
              --container-runtime containerd \
              --kubelet-extra-args '--max-pods=my-max-pods-value' \
              --use-max-pods false

            --==MYBOUNDARY==--

  WorkerNodesInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WorkerNodesRole

  WorkerNodesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

Outputs:

  WorkerNodesRoleArn:
    # Needed for the last step "enable worker nodes to join the cluster":
    # https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html#eks-create-cluster
    Description: ARN of the worker nodes role
    Value: !GetAtt WorkerNodesRole.Arn

  ControlPlaneCert:
    # Needed for the last step "enable worker nodes to join the cluster":
    # https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html#eks-create-cluster
    Description: cert of eks cluster
    Value: !GetAtt ControlPlane.CertificateAuthorityData

  ControlPlaneEndpoint:
    Description: Endpoint of eks cluster
    Value: !GetAtt ControlPlane.Endpoint